/* * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.  * Redistribution and use in source and binary forms, with or without modification, are permitted provided that  * the following conditions are met: *  *     * Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright notice,  *       this list of conditions and the following disclaimer in the documentation and/or  *       other materials provided with the distribution.  *     * Neither the name of Samsung Electronics Co., Ltd. nor the names of its contributors may be used to endorse or  *       promote products derived from this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. */package com.samsung.android.sdk.accessory.example.multiplicity.consumer;import java.util.ArrayList;import java.util.Collections;import java.util.List;import android.app.Activity;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.ServiceConnection;import android.os.Bundle;import android.os.IBinder;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.widget.BaseAdapter;import android.widget.CheckBox;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;public class ConsumerActivity extends Activity {    private static TextView mTextView;    private static TextView mTextView2;    private static MessageAdapter mMessageAdapter;    private static MessageAdapter2 mMessageAdapter2;    private ListView mMessageListView;    private ListView mMessageListView2;    private boolean mIsBound = false;    private boolean mIsBound2 = false;    private ConsumerService1 mConsumerService1 = null;    private ConsumerService2 mConsumerService2 = null;    private CheckBox chkP1, chkP2;    private boolean mProvider1 = false;    private boolean mProvider2 = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mTextView = (TextView) findViewById(R.id.tvStatus);        mMessageListView = (ListView) findViewById(R.id.lvMessage);        mMessageAdapter = new MessageAdapter();        mMessageListView.setAdapter(mMessageAdapter);        chkP1 = (CheckBox) findViewById(R.id.checkBox1);        chkP1.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                mProvider1 = ((CheckBox) v).isChecked() ? true : false;            }        });        mTextView2 = (TextView) findViewById(R.id.tvStatus2);        mMessageListView2 = (ListView) findViewById(R.id.lvMessage2);        mMessageAdapter2 = new MessageAdapter2();        mMessageListView2.setAdapter(mMessageAdapter2);        chkP2 = (CheckBox) findViewById(R.id.checkBox2);        chkP2.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                mProvider2 = ((CheckBox) v).isChecked() ? true : false;            }        });        // Bind service        mIsBound = bindService(new Intent(ConsumerActivity.this, ConsumerService1.class), mConnection1, Context.BIND_AUTO_CREATE);        mIsBound2 = bindService(new Intent(ConsumerActivity.this, ConsumerService2.class), mConnection2, Context.BIND_AUTO_CREATE);    }    @Override    protected void onDestroy() {        // Clean up connections        if (mIsBound == true && mConsumerService1 != null && mConsumerService2 != null) {            if (mConsumerService1.closeConnection() && mConsumerService2.closeConnection() == false) {                updateTextView("Disconnected");                updateTextView2("Disconnected");//                Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected, Toast.LENGTH_LONG).show();                mMessageAdapter.clear();                mMessageAdapter2.clear();            }        }        // Un-bind service        if (mIsBound) {            unbindService(mConnection1);            mIsBound = false;        }        if (mIsBound2) {            unbindService(mConnection2);            mIsBound2 = false;        }        super.onDestroy();    }    public void mOnClick(View v) {        switch (v.getId()) {            case R.id.buttonConnect: {                if (mProvider1 == true) {                    if (mConsumerService1 != null && mIsBound == true) {                        mConsumerService1.findPeers();                    }                }                if (mProvider2 == true) {                    if (mConsumerService2 != null && mIsBound2 == true) {                        mConsumerService2.findPeers();                    }                }                break;            }            // case R.id.buttonConnect2: {            // if (mIsBound == true && mConsumerService2 != null) {            // mConsumerService2.findPeers();            // }            // break;            // }            // case R.id.buttonDisconnect1: {            // if (mIsBound == true && mConsumerService1 != null) {            // if (mConsumerService1.closeConnection() == false) {            // updateTextView("Disconnected");            // Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected,            // Toast.LENGTH_LONG).show();            // mMessageAdapter.clear();            // }            // }            // break;            // }            case R.id.buttonDisconnect: {                if (mProvider1 == true) {                    if (mConsumerService1 != null && mIsBound == true) {                        if (mConsumerService1.closeConnection() == false) {                            updateTextView("Disconnected");                            Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected, Toast.LENGTH_LONG).show();                            mMessageAdapter.clear();                        }                    }                }                if (mProvider2 == true) {                    if (mConsumerService2 != null && mIsBound2 == true) {                        if (mConsumerService2.closeConnection() == false) {                            updateTextView2("Disconnected");                            Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected2, Toast.LENGTH_LONG).show();                            mMessageAdapter2.clear();                        }                    }                }                break;            }            case R.id.buttonSend: {                if (mProvider1 == true) {                    if (mConsumerService1 != null && mIsBound == true) {                        if (mConsumerService1.sendData("Hello Accessory!")) {                        } else {                            Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected, Toast.LENGTH_LONG).show();                        }                    } else {                        Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected, Toast.LENGTH_LONG).show();                    }                }                if (mProvider2 == true) {                    if (mConsumerService2 != null && mIsBound2 == true) {                        if (mConsumerService2.sendData("Hello Accessory!")) {                        } else {                            Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected2, Toast.LENGTH_LONG).show();                        }                    } else {                        Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected2, Toast.LENGTH_LONG).show();                    }                }                break;            }            // case R.id.buttonSend2: {            // if (mIsBound == true && mConsumerService2 != null) {            // if (mConsumerService2.sendData("Hello Accessory!")) {            // } else {            // Toast.makeText(getApplicationContext(), R.string.ConnectionAlreadyDisconnected,            // Toast.LENGTH_LONG).show();            // }            // }            // break;            // }            default:        }    }    private final ServiceConnection mConnection1 = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName className, IBinder service) {            mConsumerService1 = ((ConsumerService1.LocalBinder) service).getService();            updateTextView("onServiceConnected");        }        @Override        public void onServiceDisconnected(ComponentName className) {            mConsumerService1 = null;            mIsBound = false;            updateTextView("onServiceDisconnected");        }    };    private final ServiceConnection mConnection2 = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName className, IBinder service) {            mConsumerService2 = ((ConsumerService2.LocalBinder) service).getService();            updateTextView2("onServiceConnected");        }        @Override        public void onServiceDisconnected(ComponentName className) {            mConsumerService2 = null;            mIsBound2 = false;            updateTextView2("onServiceDisconnected");        }    };    public static void addMessage(String data) {        mMessageAdapter.addMessage(new Message(data));    }    public static void addMessage2(String data) {        mMessageAdapter2.addMessage(new Message(data));    }    public static void updateTextView(final String str) {        mTextView.setText(str);    }    public static void updateTextView2(final String str) {        mTextView2.setText(str);    }    private class MessageAdapter extends BaseAdapter {        private static final int MAX_MESSAGES_TO_DISPLAY = 20;        private List<Message> mMessages;        public MessageAdapter() {            mMessages = Collections.synchronizedList(new ArrayList<Message>());        }        void addMessage(final Message msg) {            runOnUiThread(new Runnable() {                @Override                public void run() {                    if (mMessages.size() == MAX_MESSAGES_TO_DISPLAY) {                        mMessages.remove(0);                        mMessages.add(msg);                    } else {                        mMessages.add(msg);                    }                    notifyDataSetChanged();                    mMessageListView.setSelection(getCount() - 1);                }            });        }        void clear() {            runOnUiThread(new Runnable() {                @Override                public void run() {                    mMessages.clear();                    notifyDataSetChanged();                }            });        }        @Override        public int getCount() {            return mMessages.size();        }        @Override        public Object getItem(int position) {            return mMessages.get(position);        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater inflator = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);            View messageRecordView = null;            if (inflator != null) {                messageRecordView = inflator.inflate(R.layout.message, null);                TextView tvData = (TextView) messageRecordView.findViewById(R.id.tvData);                Message message = (Message) getItem(position);                tvData.setText(message.data);            }            return messageRecordView;        }    }    private class MessageAdapter2 extends BaseAdapter {        private static final int MAX_MESSAGES_TO_DISPLAY = 20;        private List<Message> mMessages;        public MessageAdapter2() {            mMessages = Collections.synchronizedList(new ArrayList<Message>());        }        void addMessage(final Message msg) {            runOnUiThread(new Runnable() {                @Override                public void run() {                    if (mMessages.size() == MAX_MESSAGES_TO_DISPLAY) {                        mMessages.remove(0);                        mMessages.add(msg);                    } else {                        mMessages.add(msg);                    }                    notifyDataSetChanged();                    mMessageListView2.setSelection(getCount() - 1);                }            });        }        void clear() {            runOnUiThread(new Runnable() {                @Override                public void run() {                    mMessages.clear();                    notifyDataSetChanged();                }            });        }        @Override        public int getCount() {            return mMessages.size();        }        @Override        public Object getItem(int position) {            return mMessages.get(position);        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater inflator = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);            View messageRecordView = null;            if (inflator != null) {                messageRecordView = inflator.inflate(R.layout.message, null);                TextView tvData = (TextView) messageRecordView.findViewById(R.id.tvData);                Message message = (Message) getItem(position);                tvData.setText(message.data);            }            return messageRecordView;        }    }    private static final class Message {        String data;        public Message(String data) {            super();            this.data = data;        }    }}